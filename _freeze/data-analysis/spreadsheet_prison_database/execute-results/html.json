{
  "hash": "eb09387bbbac3f4ea840903ce2b043a1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"There and back again: a spreadsheets' tale\"\nformat:\n  html:\n    code-fold: true\n    code-summary: Show the code\ndescription: In which I complain about spreadsheets, normalize a database, then make another spreadsheet\ndate-format: iso\ncategories:\n  - data analysis\n  - prison map\ndate: 2024-03-14\nexecute:\n  freeze: true\n---\n\nThis post might count as a confession. I always complain about spreadsheets, and that the more ornate you make them the more brittle they are. Here's how I've made a pretty complicated spreadsheet, and why I did it. This is quite a long one, and if you aren't interested in hearing why I don't think spreadsheets are the best solution to the problems they are applied to at great length, maybe give this one a miss. If you want to read some of my thought process approaching a problem, and about my gifts as a cheapskate, then please continue.\n\n## The Data\nI'm working with a friend who's a sociologist on an interactive map of UK prisons. In [a previous step](prison_map.qmd), I scraped Wikipedia for the coordinates of each listed prison and put a dot on the map for each one. My friend also sent me a spreadsheet with a lot more information about prisons, including some that are closed. He's also interested in immigration detention, so there's information about removal centres etc. in there.\n\nLet's look at the spreadsheet:\n\n::: {#3f67a395 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\ntom_df = pd.read_excel(\"data/Prison database.xlsb.xlsx\", sheet_name=\"eprison\")\ntom_df.dropna(axis=1, how='all', inplace=True)\ntom_df.drop(['Column1', *['Column'+str(i) for i in range(3,10)]], axis = 1, inplace=True)\ntom_df['Name'] = tom_df['Name'].str.title().str.replace(' Sch', ' SCH')\ntom_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=137}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Prison Name</th>\n      <th>Name</th>\n      <th>Area</th>\n      <th>Type</th>\n      <th>Operator</th>\n      <th>Opened</th>\n      <th>Operational Capacity</th>\n      <th>Closed</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ALDINE SCH</td>\n      <td>Aldine</td>\n      <td>NaN</td>\n      <td>Secure Children's Home</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ATKINSON UNIT SCH</td>\n      <td>Atkinson Unit SCH</td>\n      <td>NaN</td>\n      <td>Secure Children's Home</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AYCLIFFE SCH</td>\n      <td>Aycliffe SCH</td>\n      <td>NaN</td>\n      <td>Secure Children's Home</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>BARTON MOSS SCH</td>\n      <td>Barton Moss SCH</td>\n      <td>NaN</td>\n      <td>Secure Children's Home</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>BEECHFIELD SCH</td>\n      <td>Beechfield SCH</td>\n      <td>NaN</td>\n      <td>Secure Children's Home</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSo there are some more columns here, like the prison type and capacity. I'll merge this with my coordinate data. Then I'll make the prison names a bit more pleasant to read by first making them title case, rather than ALL CAPS, and then make the initialisms (\"SCH\" for Secure Children's Home etc.) uppercase.\n\n::: {#a0169851 .cell execution_count=2}\n``` {.python .cell-code}\ncoordinate_df = pd.read_csv(\"data/prison_coordinates.csv\")\ncoordinate_df.rename(columns = {'Unnamed: 0': 'Name'}, inplace=True)\ncoordinate_df.drop(\"Coordinates\", axis = 1, inplace=True)\n\nprison_with_coord_df = pd.merge(left=coordinate_df.drop(columns = 'Operator'),\n                  right=tom_df,\n                  on='Name',\n                  how='outer')\n\nprison_with_coord_df['Prison Name'] = prison_with_coord_df['Prison Name'].str.title()\n\nprison_with_coord_df['Prison Name'] = prison_with_coord_df['Prison Name'].replace({'Hmp': 'HMP',\n                                                                ' Sch': ' SCH',\n                                                                'HMPYOI': 'HMPYOI',\n                                                                'Yoi ': 'YOI ',\n                                                                'Hmyoi': 'HMYOI',\n                                                                'Stc': 'STC',\n                                                                'Irc': 'IRC',\n                                                                \"'S\": \"'s\"\n                                                                }, regex=True)\n\nprison_with_coord_df.loc[~prison_with_coord_df['latitude'].isnull()].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=138}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Capacity</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>Prison Name</th>\n      <th>Area</th>\n      <th>Type</th>\n      <th>Operator</th>\n      <th>Opened</th>\n      <th>Operational Capacity</th>\n      <th>Closed</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Addiewell</td>\n      <td>700.0</td>\n      <td>55.846667</td>\n      <td>-3.599167</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Altcourse</td>\n      <td>1324.0</td>\n      <td>53.461944</td>\n      <td>-2.935556</td>\n      <td>HMP Altcourse</td>\n      <td>31.83 hectares</td>\n      <td>Local adult male prison</td>\n      <td>Private - G4S</td>\n      <td>1997</td>\n      <td>1,184 (Jan 2021)</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Ashfield</td>\n      <td>400.0</td>\n      <td>51.481389</td>\n      <td>-2.439722</td>\n      <td>HMP Ashfield</td>\n      <td>6.29 hectares</td>\n      <td>Category C adult male prison</td>\n      <td>Private - Serco&amp;nbsp</td>\n      <td>1999</td>\n      <td>412 (Jan 2021)</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Askham Grange</td>\n      <td>128.0</td>\n      <td>53.925833</td>\n      <td>-1.184444</td>\n      <td>HMP/ YOI Askham Grange</td>\n      <td>4.08 hectares</td>\n      <td>Open adult female prison</td>\n      <td>Public - Ministry of Justice</td>\n      <td>1947</td>\n      <td>128 (Jan 2021)</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Aylesbury</td>\n      <td>443.0</td>\n      <td>51.821944</td>\n      <td>-0.799722</td>\n      <td>HMYOI Aylesbury</td>\n      <td>8.89 hectares</td>\n      <td>Male closed Young Offender Institution</td>\n      <td>Public - Ministry of Justice</td>\n      <td>1847</td>\n      <td>229 (April 2021)</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThat's a bit nicer, isn't it? There are still some things that aren't ideal about this dataset.\n\n## Improving the data model\n### Room for improvement\n\n::: {#55b5b2c4 .cell execution_count=3}\n``` {.python .cell-code}\nshow_multiple = prison_with_coord_df[['Prison Name', 'Operational Capacity']]\nshow_multiple['cap_len'] = show_multiple['Operational Capacity'].apply(lambda x: len(x.split(' ')) if type(x) == str else 0)\nshow_multiple.sort_values(by='cap_len', ascending=False).drop(columns=['cap_len']).head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=139}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Prison Name</th>\n      <th>Operational Capacity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>132</th>\n      <td>The Marshalsea</td>\n      <td>34 (1802) (with 8 wives and seven children)</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Brook House Immigration Removal Centre</td>\n      <td>429 (June 2010), 448 (2013), 450 (2022)</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>HMP Wellingborough</td>\n      <td>525 (Aug 2003), 548 (August 2010)</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Campsfield House Immigration Removal Centre</td>\n      <td>199 (1997), 216 (2008), 257 (2018)</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>HMP Canterbury</td>\n      <td>314 (as of August 2008)</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>HMP Fosse Way</td>\n      <td>1930 (planned in 2023)</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>HMP/ YOI Prescoed</td>\n      <td>252 (Oct 2017)</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>HMP Preston</td>\n      <td>680 (Jan 2021)</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>HMP Ranby</td>\n      <td>1032 (Jan 2021)</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>HMP Holme House</td>\n      <td>1159 (Jan 2021)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis is the first issue. Some columns, including the Operational Capacity, contain multiple pieces of data. The problem, of course, is that the prisons can change over time. I did try to parse this^[I used a horrible regular expression: (\\d{1,3}(,)?\\d{3}(>)?|(?:\\d{1,3}(,)?\\d{3} (?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4})|(?:\\d{1,3}(,)?\\d{3} \\d{4})) then used the dataframe's `explode` method] and keep the structure, but the underlying problem is that a single table is insufficient to deal with the nature of prisons over time.\n\n### A better data model\nTo get things in a more reasonable format, let's use the concept of a data model. This will let us think about what aspects of a prison we really want to capture. Here are the facts:\n\n1. More than one prison can have existed on one site (e.g. HMP Fosse Way was built on the site of HMP Glen Parva)\n2. A prison can change capacity over time. A new wing can be added, or another closed.\n3. A prison can change operator over time. Some have been turned over to private operators, others go from being a prison to some kind of immigration detention centre and back again.\n4. A prison can change type over time. The classification of prisoner security can change, or the age or gender of inmates can change\n\nThis means we can represent our data like this:\n\n\n```{mermaid}\nerDiagram\n  SITES ||--o{ PRISONS : contains\n  SITES {\n    int site_id\n    string site_name\n    float latitude\n    float longitude\n    float area\n  }\n  PRISONS {\n    int prison_id\n    string prison_name\n    int site_id\n  }\n  PRISONS ||--o{ TYPES : has\n  TYPES {\n    int prison_id\n    string type\n    date start_date\n    date end_date\n  }\n  OPERATOR_DATES }o--|| PRISONS : operates\n  OPERATOR_DATES {\n    int operation_id\n    string operator\n    int prison_id\n    date start_date\n    date end_date\n  }\n  PRISONS ||--o{ CAPACITIES : has\n  CAPACITIES {\n    int capacity_id\n    int prison_id\n    int operational_capacity\n    date start_date\n    date end_date\n  }\n```\n\n\nHere we have split one table into multiple tables. This allows each prison to be represented once in the prisons table, and the ways each prison changes over time in different ways to be represented separately. In the \"Types\", \"Operator Dates\", and \"Capacities\" tables, the prison_id field means you can relate each entry to a prison.\n\nThis way of representing the data scratches an itch in my brain. In data terms, this is called a \"data schema\". The original data was sort of in one too, if not consistently. This particular schema is quite simple, and known as a star schema. In this terminology, the prisons table is a fact table, and the others are dimension tables. I could further split these up so the dimension tables had further dimensions off these, but I think for this relatively small dataset, this is sufficient.\n\nUsing the star schema we can capture the ways a prison can change over time independently (even if changes often occur together) in a reliable way.\n\n## Data wrangling\nSo how do we move from the \"flat\" table in the spreadsheet to the star schema?\n\n### Sites table\nThe first thing to do is to make an entry for each site. In the current data, there are only two prisons that share a site, but I suspect as data is added we may well find more.\n\n::: {#1aa498c5 .cell execution_count=4}\n``` {.python .cell-code}\nsite_df = pd.DataFrame({\n    'site_name': prison_with_coord_df['Name'].unique()\n})\n\nsite_df = site_df.merge(prison_with_coord_df[['Name', 'Area', 'latitude', 'longitude']], left_on='site_name', right_on='Name').drop(columns='Name')\nsite_df['area'] = site_df['Area'].apply(lambda x: float(x.split(' ')[0]) if type(x) == str else x)\nsite_df.drop(columns='Area', inplace=True)\nsite_df.drop_duplicates(inplace=True)\nsite_df['site_id'] = site_df.index + 1\nsite_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=140}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>site_name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>area</th>\n      <th>site_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Abingdon</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Addiewell</td>\n      <td>55.846667</td>\n      <td>-3.599167</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Aldine</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Aldington</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Altcourse</td>\n      <td>53.461944</td>\n      <td>-2.935556</td>\n      <td>31.83</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nI also did a simple bit of data cleaning here. The area column was given as a string with \"X hectares\". As each entry was given in hectares, I've removed that and made it a number.\n\n### Prisons table\nThe central table of the schema is pretty simple. All I've done here is take the prison name, added a column to generate a prison ID for the rest of the tables, then joined it with the sites table so we can find the site it was built on.\n\n::: {#17cce9b3 .cell execution_count=5}\n``` {.python .cell-code}\nprisons_df = pd.DataFrame({\n    'prison_name': prison_with_coord_df['Prison Name'],\n    'site': prison_with_coord_df['Name']\n})\nprisons_df = prisons_df.merge(site_df[['site_name', 'site_id']], left_on = 'site', right_on = 'site_name').drop(columns=['site', 'site_name'])\nprisons_df['prison_id'] = prisons_df.index+1\nprisons_df.dropna(inplace=True)\n\nprisons_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=141}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>prison_name</th>\n      <th>site_id</th>\n      <th>prison_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>HMP Abingdon</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Aldine SCH</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>HMP Aldington</td>\n      <td>4</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>HMP Altcourse</td>\n      <td>5</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>HMP Ashfield</td>\n      <td>6</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Types table\nMaking this dimension table is pretty simple too. This is only true because the complexity prison histories isn't held in this dataset!\n\n::: {#109cd253 .cell execution_count=6}\n``` {.python .cell-code}\ntypes_df = prison_with_coord_df[['Prison Name', 'Type', 'Opened', 'Closed']]\ntypes_df.columns = ['prison_name', 'prison_type', 'start_date', 'end_date']\n\ntypes_df = types_df.merge(prisons_df, on = 'prison_name').drop(columns=['prison_name', 'site_id'])\n\ntypes_df\n```\n\n::: {.cell-output .cell-output-display execution_count=142}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>prison_type</th>\n      <th>start_date</th>\n      <th>end_date</th>\n      <th>prison_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>1811</td>\n      <td>1868.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Secure Children's Home</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Category C adult male prison</td>\n      <td>1947</td>\n      <td>1999.0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Local adult male prison</td>\n      <td>1997</td>\n      <td>NaN</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Category C adult male prison</td>\n      <td>1999</td>\n      <td>NaN</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>Local adult male prison</td>\n      <td>1849</td>\n      <td>NaN</td>\n      <td>205</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>Core local adult male prison</td>\n      <td>1992</td>\n      <td>NaN</td>\n      <td>206</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>Local adult male prison</td>\n      <td>1891</td>\n      <td>NaN</td>\n      <td>208</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>Category C adult male prison</td>\n      <td>1979</td>\n      <td>NaN</td>\n      <td>209</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>Immigration Removal Centre</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>210</td>\n    </tr>\n  </tbody>\n</table>\n<p>181 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\nThere's no data in the original about how the types changed over time, exept sporadically in notes. For example, HMP Morton Hall has changed type at least five times since 1985, but this isn't captured. For now, I'm just taking the type provided and pretending that has been the type for the history of the prison. In a later stage, the histories will be captured more fully. I'll also restrict the possible values for type, as there are defined types a prison can have, and the type column in the spreadsheet isn't consistent with this. For now, this will do.\n\n### Operator table\nThis one isn't hard either, and just needs a bit of cleaning\n\n::: {#55490f9b .cell execution_count=7}\n``` {.python .cell-code}\noperator_df = prison_with_coord_df[['Prison Name', 'Operator', 'Opened', 'Closed']]\n\noperator_df.columns = ['prison_name', 'operator', 'start_date', 'end_date']\noperator_df['operator'] = operator_df['operator'].apply(lambda x: x.split('- ')[1] if type(x) == str and len(x.split('- ')) > 1 else x)\n\noperator_df['operator'] = operator_df['operator'].replace({'Ministry of Justice': 'His Majesty\\'s Prison Service', 'Serco&nbsp':'Serco'})\n\noperator_df = operator_df.merge(prisons_df[['prison_name', 'prison_id']], on='prison_name', how='left')\noperator_df['operation_id'] = operator_df.index+1\noperator_df = operator_df.loc[~operator_df['prison_name'].isnull()].drop(columns=['prison_name'])\n\noperator_df\n```\n\n::: {.cell-output .cell-output-display execution_count=143}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>operator</th>\n      <th>start_date</th>\n      <th>end_date</th>\n      <th>prison_id</th>\n      <th>operation_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>1811</td>\n      <td>1868.0</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>His Majesty's Prison Service</td>\n      <td>1947</td>\n      <td>1999.0</td>\n      <td>4.0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>G4S</td>\n      <td>1997</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Serco</td>\n      <td>1999</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>204</th>\n      <td>His Majesty's Prison Service</td>\n      <td>1849</td>\n      <td>NaN</td>\n      <td>205.0</td>\n      <td>205</td>\n    </tr>\n    <tr>\n      <th>205</th>\n      <td>His Majesty's Prison Service</td>\n      <td>1992</td>\n      <td>NaN</td>\n      <td>206.0</td>\n      <td>206</td>\n    </tr>\n    <tr>\n      <th>207</th>\n      <td>His Majesty's Prison Service</td>\n      <td>1891</td>\n      <td>NaN</td>\n      <td>208.0</td>\n      <td>208</td>\n    </tr>\n    <tr>\n      <th>208</th>\n      <td>His Majesty's Prison Service</td>\n      <td>1979</td>\n      <td>NaN</td>\n      <td>209.0</td>\n      <td>209</td>\n    </tr>\n    <tr>\n      <th>209</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>210.0</td>\n      <td>210</td>\n    </tr>\n  </tbody>\n</table>\n<p>181 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe main thing here is that whether the prison was privately or publicly owned was included in the column. I've removed this, then have done some tidying. I later had to go through manually and correct some spelling mistakes. Some stuff is easier not to bother programming in.\n\nThis presents an opportunity to show the strengths of making a more complex schema. If we wanted to keep track whether a prison was privately or publicly operated, we could add another table to the model to represent this.\n\n\n```{mermaid}\nerDiagram\n  SITES ||--o{ PRISONS : contains\n  SITES {\n    int site_id\n    string site_name\n    float latitude\n    float longitude\n    float area\n  }\n  PRISONS {\n    int prison_id\n    string prison_name\n    int site_id\n  }\n  PRISONS ||--o{ TYPES : has\n  TYPES {\n    int prison_id\n    string type\n    date start_date\n    date end_date\n  }\n  OPERATOR_DATES }o--|| PRISONS : operates\n  OPERATOR_DATES {\n    int operation_id\n    string operator\n    int prison_id\n    date start_date\n    date end_date\n  }\n  PRISONS ||--o{ CAPACITIES : has\n  CAPACITIES {\n    int capacity_id\n    int prison_id\n    int operational_capacity\n    date start_date\n    date end_date\n  }\n  OPERATOR_TYPE ||--o{ OPERATOR_DATES : public\n  OPERATOR_TYPE {\n    string operator\n    bool public\n  }\n```\n\n\nI'm not doing this for now, as there are not many operators and the purpose of the model doesn't require it.\n\n### Capacity table\nThis might be the messiest one. We do have multiple pieces of data, as we've seen above. What I'm doing for now is pretending each prison hasn't changed over time, and this is mostly because the dates provided are mostly when a capacity was recorded, not when the change happened. Unfortunately for my sociologist friend, this is going to mean a lot of digging and manual data entry, unless we find a new data source!\n\n::: {#7a984fa1 .cell execution_count=8}\n``` {.python .cell-code}\ncapacities_df = prison_with_coord_df[['Prison Name', 'Operational Capacity', 'Opened', 'Closed']]\ncapacities_df.columns = ['prison_name', 'operational_capacity', 'start_date', 'end_date']\n\ncapacities_df = capacities_df.merge(prisons_df, on='prison_name', how='left').drop(columns=['prison_name', 'site_id'])\n\ncapacities_df['operational_capacity'] = capacities_df['operational_capacity'].apply(lambda x: x.split(' ')[0] if type(x) == str else x)\ncapacities_df['operational_capacity'] = capacities_df['operational_capacity'].str.replace(r'[^1-9]','', regex=True)\ncapacities_df['operational_capacity'] = capacities_df['operational_capacity'].apply(lambda x: int(x) if type(x) == str and len(x) > 0 else None)\ncapacities_df['capacity_id'] = capacities_df.index+1\n\ncapacities_df\n```\n\n::: {.cell-output .cell-output-display execution_count=144}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>operational_capacity</th>\n      <th>start_date</th>\n      <th>end_date</th>\n      <th>prison_id</th>\n      <th>capacity_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>1811</td>\n      <td>1868.0</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>1947</td>\n      <td>1999.0</td>\n      <td>4.0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1184.0</td>\n      <td>1997</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>205</th>\n      <td>535.0</td>\n      <td>1992</td>\n      <td>NaN</td>\n      <td>206.0</td>\n      <td>206</td>\n    </tr>\n    <tr>\n      <th>206</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>207</td>\n    </tr>\n    <tr>\n      <th>207</th>\n      <td>115.0</td>\n      <td>1891</td>\n      <td>NaN</td>\n      <td>208.0</td>\n      <td>208</td>\n    </tr>\n    <tr>\n      <th>208</th>\n      <td>12.0</td>\n      <td>1979</td>\n      <td>NaN</td>\n      <td>209.0</td>\n      <td>209</td>\n    </tr>\n    <tr>\n      <th>209</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>210.0</td>\n      <td>210</td>\n    </tr>\n  </tbody>\n</table>\n<p>210 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n## What now?\nWe have the data in the tables as required, with the relationships between tables established.\n\n### The ideal world\nWhat we have here is a great case for using a relational database. Relational Database Management Systems are well-established pieces of software that make it easy for you to add entries to a system like this while maintaining data integrity, and have guard rails in place to stop you from doing something that breaks your system.\n\n### The real world\nMore important than protecting users from themselves, and providing a convenient interface is the ability to share it with my collaborator. There are free database hosting services, but these are mostly trials, and often involve learning a proprietary system. Then I have to set up administration so that my friend can edit it and protect it from vandals. Because I am both stupid and lazy, I'm going to use a stupid and lazy solution: another spreadsheet.\n\n## Back to a spreadsheet\nGoogle sheets has the features I want - I can share it with my friend and Google handles authentication for me. I can mitigate some of the risks of using a spreadsheet by applying data validation rules. For example, as there are a limited set of options, I can restrict that column of the spreadsheet to only accept those options. Sheets also makes these into a snazzy drop-down menu:\n\n![](prison_spreadsheet_images/validation_options.png)\n\nI have also made it so it shouts at you if you try to duplicate entries by adding a prison twice or trying to reuse a prison ID, for example.\n\nThe difficulty comes with adding entries. Human beings aren't made to remember that prison 157 is Hassockfield STC. This means that when you're adding information about a prison, you would need to switch between sheets and check IDs all over the place.\n\n### Apps Script\n\nAnother feature Google Sheets offers is Apps Script. This is basically the possibility of using javascript to build your own extensions. The way this works is that you provide some code that runs in your sheet, and they provide an API for accessing the data in your sheet. Very clever people can use this to link together Google's services and even build full web apps. This isn't something I need to scale, so I've made a fairly minimal one, which is just a little sidebar that pops up and tells you about a prison you care about:\n![](prison_spreadsheet_images/sidebar.png)\n\nThis is something of a work in progress. If the requirements of the project change, I can make a full user interface, as the Sheets API supports modifying the spreadsheet.\n\nHere's the code if you want a look. It's very much a hack, so I wouldn't recommend it^[particularly the bit where I don't bother parsing the datetime format to read the year from cells, and use a regular expression instead].\n\n\n```{ojs}\n//| eval: false\n\nfunction onOpen() {\n  var ui = SpreadsheetApp.getUi();\n  var menu = ui.createMenu('Prison Data');\n  menu.addItem('Select Prison', 'showSidebar');\n  menu.addToUi();\n}\n\nfunction showSidebar() {\n  var html = HtmlService.createHtmlOutputFromFile('Sidebar')\n      .setTitle('Prison Information');\n  SpreadsheetApp.getUi().showSidebar(html);\n}\n\nfunction prisonOptions() {\n  var prisonsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Prisons');\n  var prisonData = prisonsSheet.getDataRange().getValues();\n  return prisonData.map((row) => row[1])\n}\n\nfunction getPrisonID(prisonName) {\n  var prisonsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Prisons');\n  var prisonData = prisonsSheet.getDataRange().getValues();\n  var prisonRow = prisonData.find(row => row[1] === prisonName);\n  \n  if (!prisonRow) {\n    return 'Prison not found';\n  }\n  \n  return prisonRow[0];\n}\n\nfunction getSiteInfoForPrison(prisonName) {\n  var prisonsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Prisons');\n  var prisonData = prisonsSheet.getDataRange().getValues();\n  var prisonRow = prisonData.find(row => row[1] == prisonName);\n\n  var siteID = prisonRow[2];\n  var siteSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sites');\n  \n  var siteData = siteSheet.getDataRange().getValues();\n  var siteRow = siteData.find(row => row[0] === siteID);\n  \n  if (!siteRow) {\n    return 'Site not found';\n  }\n  //Return an object of site information\n  return {\n    siteName: siteRow[1],\n    latitude: siteRow[2],\n    longitude: siteRow[3],\n    area: siteRow[4],\n  }\n}\n\nfunction getTypeInfoForPrison(prisonID) {\n  var typeSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Types');\n  \n  var typeData = typeSheet.getDataRange().getValues();\n  var typeRows = typeData.filter(row => row[0] === prisonID);\n  return typeRows.map(row => {return {\n    type: row[1],\n    start_date: /[\\d]{4}/m.test(String(row[2])) ? String(row[2]).match(/[\\d]{4}/m)[0] : \"\",\n    end_date: /[\\d]{4}/m.test(String(row[3])) ? String(row[3]).match(/[\\d]{4}/m)[0] : \"\"\n  }});\n}\n\nfunction getOperatorDatesForPrison(prisonID) {\n  var opDatesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Operator dates');\n  var opDatesData = opDatesSheet.getDataRange().getValues();\n  var opDatesRows = opDatesData.filter(row => row[2] === prisonID);\n  \n  var datesobj = opDatesRows.map(row => {return {\n    operator: row[1],\n    start_date: /[\\d]{4}/m.test(String(row[3])) ? String(row[3]).match(/[\\d]{4}/m)[0] : \"\",\n    end_date: /[\\d]{4}/m.test(String(row[4])) ? String(row[4]).match(/[\\d]{4}/m)[0] : \"\"\n  }});\n\n  Logger.log(datesobj);\n  return datesobj\n}\n\nfunction getCapacitiesForPrison(prisonID) {\n  var capacitiesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Capacities');\n  var capacitiesData = capacitiesSheet.getDataRange().getValues();\n  var capacityRows = capacitiesData.filter(row => row[1] === prisonID);\n  \n  return capacityRows.map(row => {return {\n    operationalCapacity: row[2],\n    start_date: /[\\d]{4}/m.test(String(row[3])) ? String(row[3]).match(/[\\d]{4}/m)[0] : \"\",\n    end_date: /[\\d]{4}/m.test(String(row[4])) ? String(row[4]).match(/[\\d]{4}/m)[0] : \"\"\n  }});\n}\n```\n\n\nAnd the html\n<details>\n\n```{html}\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      table {\n        border-collapse: collapse;\n        border: 2 px solid black;\n      }\n      table td, table th {\n        border: 1px solid black;\n      }\n    </style>\n  </head>\n  <body>\n    <select id=\"prisonDropdown\" onchange=\"changeID()\">\n      <option value=\"\">Select a Prison</option>\n    </select>\n    <div id=\"prisonID\"></div>\n    <div id=\"siteInfo\"></div>\n    <div id=\"typeInfo\"></div>\n    <br>\n    <div id=\"operatorDatesInfo\"></div>\n    <br>\n    <div id=\"capacitiesInfo\"></div>\n\n    <script>\n      // Function to populate the dropdown with prison options\n      function populatePrisons(prisons) {\n        var dropdown = document.getElementById(\"prisonDropdown\");\n\n        // Clear existing options\n        dropdown.innerHTML = \"\";\n\n        // Add options for each prison\n        prisons.forEach(function(prison) {\n          var option = document.createElement(\"option\");\n          option.value = prison;\n          option.text = prison;\n          dropdown.appendChild(option);\n        });\n      }\n\n      // Function to handle error\n      function showError(error) {\n        console.error(\"Error:\", error);\n      }\n\n      // Function to show site info for the selected prison\n      function changeID() {\n        var selectedPrison = document.getElementById(\"prisonDropdown\").value;\n\n        google.script.run.withSuccessHandler(displayPrisonID)\n                          .withFailureHandler(showError)\n                          .getPrisonID(selectedPrison);\n        google.script.run.withSuccessHandler(displaySiteInfo)\n                          .withFailureHandler(showError)\n                          .getSiteInfoForPrison(selectedPrison);\n\n      }\n\n      function showInfo() {\n        var prisonID = parseInt(document.getElementById(\"prisonID\").innerText.slice(11));\n        \n        google.script.run.withSuccessHandler(displayTypeInfo)\n                          .withFailureHandler(showError)\n                          .getTypeInfoForPrison(prisonID);\n        google.script.run.withSuccessHandler(displayOperatorDates)\n                          .withFailureHandler(showError)\n                          .getOperatorDatesForPrison(prisonID);\n        google.script.run.withSuccessHandler(displayCapacities)\n                          .withFailureHandler(showError)\n                          .getCapacitiesForPrison(prisonID);\n\n      }\n\n      function displayPrisonID(prisonID) {\n        var prisonIDDiv = document.getElementById(\"prisonID\");\n        prisonIDDiv.innerHTML = `<p>Prison ID: ${prisonID}</p>`;\n        // Trigger the showInfo function after updating the prisonID div\n        showInfo();\n      }\n\n      // Function to display site info in the \"siteInfo\" div\n      function displaySiteInfo(siteInfo) {\n        var siteInfoDiv = document.getElementById(\"siteInfo\");\n        siteInfoDiv.innerHTML = `\n          <p>Site Name: ${siteInfo.siteName}</p>\n          <p>Latitude: ${siteInfo.latitude}</p>\n          <p>Longitude: ${siteInfo.longitude}</p>\n          <p>Area: ${siteInfo.area}</p>\n        `;\n      }\n\n\n      // Function to show type info in the \"typeInfo\" div\n      function displayTypeInfo(typeInfo) {\n        var typeInfoDiv = document.getElementById(\"typeInfo\");\n        var tableHTML = \"<table style=\\\"border: 1px solid black\\\"><tr><th>Type</th><th>Start Date</th><th>End Date</th></tr>\";\n\n        typeInfo.forEach(function(type) {\n          tableHTML += `<tr><td>${type.type}</td><td>${type.start_date}</td><td>${type.end_date}</td></tr>`;\n        });\n        \n        tableHTML += \"</table>\";\n        typeInfoDiv.innerHTML = tableHTML;\n      }\n\n      function displayOperatorDates(operatorDates) {\n        var operatorDatesInfoDiv = document.getElementById(\"operatorDatesInfo\");\n        var tableHTML = \"<table><tr><th>Operator</th><th>Start Date</th><th>End Date</th></tr>\";\n        operatorDates.forEach(function(dateInfo) {\n          tableHTML += `<tr><td>${dateInfo.operator}</td><td>${dateInfo.start_date}</td><td>${dateInfo.end_date}</td></tr>`;\n          });\n          tableHTML += \"</table>\";\n          operatorDatesInfoDiv.innerHTML = tableHTML;\n        console.log(operatorDates);\n      }\n\n      function displayCapacities(capacites) {\n        var capacitesDiv = document.getElementById(\"capacitiesInfo\");\n        var tableHTML = \"<table><tr><th>Capacity</th><th>Start Date</th><th>End Date</th></tr>\";\n        capacites.forEach(function(dateInfo) {\n          tableHTML += `<tr><td>${dateInfo.operationalCapacity}</td><td>${dateInfo.start_date}</td><td>${dateInfo.end_date}</td></tr>`;\n          });\n          tableHTML += \"</table>\";\n          capacitesDiv.innerHTML = tableHTML;\n      }\n      // Call the prisonOptions function in the Google Apps Script\n      // and populate the dropdown with the retrieved prison data\n      google.script.run.withSuccessHandler(populatePrisons)\n                        .withFailureHandler(showError)\n                        .prisonOptions();\n      \n    </script>\n  </body>\n</html>\n```\n\n</details>\n\n## Conclusion\nSo what is the takeaway here? Just use spreadsheets? No. I'm doing my best not to use the spreadsheet as a spreadsheet. I guess my conclusion here is that it's hard to argue with free hosting where someone else handles security for you!\n\n",
    "supporting": [
      "spreadsheet_prison_database_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}