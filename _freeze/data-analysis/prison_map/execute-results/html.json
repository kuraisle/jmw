{
  "hash": "e3388b9bc7ee455edb9c20859e249892",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"UK Prisons\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\ndescription: A map of the UK showing prison locations.\nimage: static_prison_map.png\ndate-format: iso\ncategories:\n  - data analysis\n  - prison map\ndate: 2024-02-02\nexecute:\n  freeze: true\n---\n\n::: {#11de6b08 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport plotly.io as pio\nimport plotly.express as px\n\nprison_df = pd.read_csv('data/prison_coordinates.csv')\nprison_df.columns = ['Prison Name', 'Capacity', 'Operator', 'Coordinates', 'latitude', 'longitude']\n\nfig = px.scatter_mapbox(\n    prison_df,\n    lat = 'latitude',\n    lon = 'longitude',\n    mapbox_style = 'carto-positron',\n    custom_data = ['Prison Name', 'Capacity', 'Operator'],\n    size = 'Capacity',\n    color = 'Operator',\n    width = 800,\n    height = 800,\n    zoom = 4.6\n)\n\nfig.update_traces(\n    hovertemplate = '<b>%{customdata[0]}</b><br>Capacity: %{customdata[1]}<br>Operator: %{customdata[2]}'\n)\n\nfig.update_mapboxes(\n    center_lat = 54,\n    center_lon= -2.5\n)\n\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"161a9f4c-94bf-4945-904a-75ef1eef2d90\" class=\"plotly-graph-div\" style=\"height:800px; width:800px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"161a9f4c-94bf-4945-904a-75ef1eef2d90\")) {                    Plotly.newPlot(                        \"161a9f4c-94bf-4945-904a-75ef1eef2d90\",                        [{\"customdata\":[[\"Altcourse\",1324,\"G4S\"],[\"Five Wells\",1680,\"G4S\"],[\"Oakwood\",1605,\"G4S\"],[\"Parc\",1800,\"G4S\"],[\"Rye Hill\",664,\"G4S\"]],\"hovertemplate\":\"\\u003cb\\u003e%{customdata[0]}\\u003c\\u002fb\\u003e\\u003cbr\\u003eCapacity: %{customdata[1]}\\u003cbr\\u003eOperator: %{customdata[2]}\",\"lat\":[53.4619444444445,52.285,52.6466666666667,51.5308333333333,52.3283333333333],\"legendgroup\":\"G4S\",\"lon\":[-2.93555555555556,-0.691944444444445,-2.11527777777778,-3.56083333333333,-1.2425],\"marker\":{\"color\":\"#636efa\",\"size\":[1324,1680,1605,1800,664],\"sizemode\":\"area\",\"sizeref\":5.265},\"mode\":\"markers\",\"name\":\"G4S\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"customdata\":[[\"Ashfield\",400,\"Serco\"],[\"Doncaster\",1145,\"Serco\"],[\"Dovegate\",860,\"Serco\"],[\"Fosse Way\",1715,\"Serco\"],[\"Lowdham Grange\",690,\"Serco\"],[\"Thameside\",1200,\"Serco\"],[\"Kilmarnock\",692,\"Serco\"]],\"hovertemplate\":\"\\u003cb\\u003e%{customdata[0]}\\u003c\\u002fb\\u003e\\u003cbr\\u003eCapacity: %{customdata[1]}\\u003cbr\\u003eOperator: %{customdata[2]}\",\"lat\":[51.4813888888889,53.5247222222222,52.8713888888889,52.5833333333333,53.015,51.4941666666667,55.5833333333333],\"legendgroup\":\"Serco\",\"lon\":[-2.43972222222222,-1.14583333333333,-1.78083333333333,-1.145,-1.04,0.0891666666666667,-4.43222222222222],\"marker\":{\"color\":\"#EF553B\",\"size\":[400,1145,860,1715,690,1200,692],\"sizemode\":\"area\",\"sizeref\":5.265},\"mode\":\"markers\",\"name\":\"Serco\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"customdata\":[[\"Askham Grange\",128,\"HMP\"],[\"Aylesbury\",443,\"HMP\"],[\"Bedford\",506,\"HMP\"],[\"Belmarsh\",910,\"HMP\"],[\"Berwyn\",2106,\"HMP\"],[\"Birmingham\",1450,\"HMP\"],[\"Brinsford\",569,\"HMP\"],[\"Bristol\",614,\"HMP\"],[\"Brixton\",798,\"HMP\"],[\"Buckley Hall\",381,\"HMP\"],[\"Bullingdon\",1114,\"HMP\"],[\"Bure\",624,\"HMP\"],[\"Cardiff\",784,\"HMP\"],[\"Channings Wood\",731,\"HMP\"],[\"Chelmsford\",695,\"HMP\"],[\"Coldingley\",513,\"HMP\"],[\"Cookham Wood\",157,\"HMP\"],[\"Dartmoor\",646,\"HMP\"],[\"Deerbolt\",453,\"HMP\"],[\"Downview\",358,\"HMP\"],[\"Drake Hall\",315,\"HMP\"],[\"Durham\",981,\"HMP\"],[\"East Sutton Park\",100,\"HMP\"],[\"Eastwood Park\",362,\"HMP\"],[\"Erlestoke\",470,\"HMP\"],[\"Exeter\",533,\"HMP\"],[\"Featherstone\",702,\"HMP\"],[\"Feltham\",762,\"HMP\"],[\"Ford\",557,\"HMP\"],[\"Foston Hall\",290,\"HMP\"],[\"Frankland\",750,\"HMP\"],[\"Full Sutton\",608,\"HMP\"],[\"Garth\",847,\"HMP\"],[\"Gartree\",869,\"HMP\"],[\"Grendon\",235,\"HMP\"],[\"Guys Marsh\",578,\"HMP\"],[\"Hatfield\",260,\"HMP\"],[\"Haverigg\",644,\"HMP\"],[\"Hewell\",1431,\"HMP\"],[\"High Down\",1208,\"HMP\"],[\"Highpoint North\",379,\"HMP\"],[\"Highpoint South\",944,\"HMP\"],[\"Hindley\",440,\"HMP\"],[\"Hollesley Bay\",330,\"HMP\"],[\"Holme House\",1211,\"HMP\"],[\"Hull\",1044,\"HMP\"],[\"Humber\",1064,\"HMP\"],[\"Huntercombe\",365,\"HMP\"],[\"Isis\",622,\"HMP\"],[\"Isle of Wight (Albany)\",567,\"HMP\"],[\"Isle of Wight (Parkhurst)\",536,\"HMP\"],[\"Kirkham\",590,\"HMP\"],[\"Kirklevington Grange\",283,\"HMP\"],[\"Lancaster Farms\",549,\"HMP\"],[\"Leeds\",1004,\"HMP\"],[\"Leicester\",392,\"HMP\"],[\"Lewes\",723,\"HMP\"],[\"Leyhill\",532,\"HMP\"],[\"Lincoln\",738,\"HMP\"],[\"Lindholme\",990,\"HMP\"],[\"Littlehey\",1200,\"HMP\"],[\"Liverpool\",1184,\"HMP\"],[\"Long Lartin\",622,\"HMP\"],[\"Low Newton\",336,\"HMP\"],[\"Maidstone\",600,\"HMP\"],[\"Manchester\",1269,\"HMP\"],[\"Moorland\",1006,\"HMP\"],[\"Morton Hall\",392,\"HMP\"],[\"New Hall\",446,\"HMP\"],[\"North Sea Camp\",306,\"HMP\"],[\"Norwich\",767,\"HMP\"],[\"Nottingham\",549,\"HMP\"],[\"Onley\",742,\"HMP\"],[\"Pentonville\",1250,\"HMP\"],[\"Portland\",624,\"HMP\"],[\"Prescoed\",178,\"HMP\"],[\"Preston\",750,\"HMP\"],[\"Ranby\",1098,\"HMP\"],[\"Risley\",1085,\"HMP\"],[\"Rochester\",620,\"HMP\"],[\"Send\",282,\"HMP\"],[\"Sheppey Cluster (Elmley)\",985,\"HMP\"],[\"Sheppey Cluster (Standford Hill)\",462,\"HMP\"],[\"Sheppey Cluster (Swaleside)\",1132,\"HMP\"],[\"Stafford\",741,\"HMP\"],[\"Stocken\",806,\"HMP\"],[\"Stoke Heath\",632,\"HMP\"],[\"Styal\",459,\"HMP\"],[\"Sudbury\",581,\"HMP\"],[\"Swansea\",422,\"HMP\"],[\"Swinfen Hall\",624,\"HMP\"],[\"The Mount\",1100,\"HMP\"],[\"The Verne\",600,\"HMP\"],[\"Thorn Cross\",321,\"HMP\"],[\"Usk\",250,\"HMP\"],[\"Wakefield\",751,\"HMP\"],[\"Wandsworth\",1665,\"HMP\"],[\"Warren Hill\",222,\"HMP\"],[\"Wayland\",1017,\"HMP\"],[\"Wealstun\",527,\"HMP\"],[\"Werrington\",162,\"HMP\"],[\"Wetherby\",360,\"HMP\"],[\"Whatton\",841,\"HMP\"],[\"Whitemoor\",448,\"HMP\"],[\"Winchester\",544,\"HMP\"],[\"Woodhill\",819,\"HMP\"],[\"Wormwood Scrubs\",1277,\"HMP\"],[\"Wymott\",1144,\"HMP\"]],\"hovertemplate\":\"\\u003cb\\u003e%{customdata[0]}\\u003c\\u002fb\\u003e\\u003cbr\\u003eCapacity: %{customdata[1]}\\u003cbr\\u003eOperator: %{customdata[2]}\",\"lat\":[53.9258333333333,51.8219444444445,52.1394444444444,51.4963888888889,53.03696,52.49272,52.6469444444444,51.4808333333333,51.451910646367,53.635,51.8488888888889,52.7594444444445,51.4811111111111,50.5116666666667,51.7358333333333,51.3225,51.3641666666667,50.5497222222222,54.5425,51.3383333333333,52.8788888888889,54.7733333333333,51.2152777777778,51.635,51.2838888888889,50.7286111111111,52.65,51.4405555555556,50.8158333333333,52.8825,54.8052777777778,53.9833333333333,53.6802777777778,52.4961111111111,51.8930555555556,50.9847222222222,53.5866666666667,54.2002777777778,52.3213888888889,51.3355555555556,52.1405555555556,52.1377777777778,53.5177777777778,52.0513888888889,54.5777777777778,53.7477777777778,53.7694444444444,51.5875,51.4941666666667,50.7122222222222,50.7152777777778,53.775,54.495,54.0530555555556,53.7955555555556,52.6275940716347,50.8725,51.6283333333333,53.2352777777778,53.5333333333333,52.2805555555556,53.4577777777778,52.1083333333333,54.8058042277109,51.2791666666667,53.4925,53.5486111111111,53.1677777777778,53.6358333333333,52.9412762560217,52.6366666666667,52.9847222222222,52.3280555555556,51.545,50.5502777777778,51.6861111111111,53.7616666666667,53.3213888888889,53.4383333333333,51.37,51.2730555555556,51.3883333333333,51.3952777777778,51.3919444444444,52.8116666666667,52.7472222222222,52.8691666666667,53.3402777777778,52.8941666666667,51.615,52.6527777777778,51.725,50.5622222222222,53.3502777777778,51.6994444444444,53.6825,51.4498780511291,52.0497222222222,52.5538888888889,53.9141666666667,53.0227777777778,53.9355555555556,52.9472222222222,52.575,51.0630555555556,52.01503,51.5166666666667,53.6783333333333],\"legendgroup\":\"HMP\",\"lon\":[-1.18444444444444,-0.799722222222222,-0.47,0.0927777777777778,-2.92733,-1.93845,-2.11,-2.59222222222222,-0.122067047470129,-2.145,-1.09361111111111,1.34611111111111,-3.16833333333333,-3.65277777777778,0.486388888888889,-0.641944444444444,0.494166666666667,-3.99611111111111,-1.93805555555556,-0.188055555555556,-2.24138888888889,-1.56805555555556,0.615833333333333,-2.46833333333333,-2.04472222222222,-3.53222222222222,-2.11166666666667,-0.435277777777778,-0.5775,-1.72527777777778,-1.55111111111111,-0.866666666666667,-2.75833333333333,-0.960833333333333,-1.00583333333333,-2.21972222222222,-0.981388888888889,-3.31361111111111,-1.99305555555556,-0.189722222222222,0.513333333333333,0.513888888888889,-2.57694444444444,1.45194444444444,-1.29305555555556,-0.295833333333333,-0.641111111111111,-1.01833333333333,0.0891666666666667,-1.30722222222222,-1.30833333333333,-2.87333333333333,-1.33972222222222,-2.77111111111111,-1.57611111111111,-1.13186883348682,-0.0058333333333333,-2.43888888888889,-0.518055555555556,-0.966666666666667,-0.312222222222222,-2.96972222222222,-1.85361111111111,-1.55662030308198,0.523888888888889,-2.24638888888889,-0.971666666666667,-0.687222222222222,-1.61166666666667,0.0629787243209966,1.31777777777778,-1.15472222222222,-1.24694444444444,-0.115833333333333,-2.4225,-2.94333333333333,-2.68861111111111,-0.998333333333333,-2.52388888888889,0.488611111111111,-0.490555555555556,0.85,0.848888888888889,0.8525,-2.11777777777778,-0.580277777777778,-2.52361111111111,-2.23916666666667,-1.76527777777778,-3.94888888888889,-1.80527777777778,-0.540833333333333,-2.43583333333333,-2.54083333333333,-2.90027777777778,-1.50916666666667,-0.177383259117122,1.44944444444444,0.858055555555556,-1.33111111111111,-2.08722222222222,-1.36805555555556,-0.911666666666667,0.0791666666666667,-1.32805555555556,-0.80667,-0.240277777777778,-2.75027777777778],\"marker\":{\"color\":\"#00cc96\",\"size\":[128,443,506,910,2106,1450,569,614,798,381,1114,624,784,731,695,513,157,646,453,358,315,981,100,362,470,533,702,762,557,290,750,608,847,869,235,578,260,644,1431,1208,379,944,440,330,1211,1044,1064,365,622,567,536,590,283,549,1004,392,723,532,738,990,1200,1184,622,336,600,1269,1006,392,446,306,767,549,742,1250,624,178,750,1098,1085,620,282,985,462,1132,741,806,632,459,581,422,624,1100,600,321,250,751,1665,222,1017,527,162,360,841,448,544,819,1277,1144],\"sizemode\":\"area\",\"sizeref\":5.265},\"mode\":\"markers\",\"name\":\"HMP\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"customdata\":[[\"Bronzefield\",569,\"Sodexo Justice Services\"],[\"Forest Bank\",1424,\"Sodexo Justice Services\"],[\"Northumberland\",1348,\"Sodexo Justice Services\"],[\"Peterborough\",840,\"Sodexo Justice Services\"],[\"Addiewell\",700,\"Sodexo Justice Services\"]],\"hovertemplate\":\"\\u003cb\\u003e%{customdata[0]}\\u003c\\u002fb\\u003e\\u003cbr\\u003eCapacity: %{customdata[1]}\\u003cbr\\u003eOperator: %{customdata[2]}\",\"lat\":[51.4327777777778,53.5147222222222,55.2961111111111,52.5863888888889,55.8466666666667],\"legendgroup\":\"Sodexo Justice Services\",\"lon\":[-0.484166666666667,-2.30194444444444,-1.63444444444444,-0.26,-3.59916666666667],\"marker\":{\"color\":\"#ab63fa\",\"size\":[569,1424,1348,840,700],\"sizemode\":\"area\",\"sizeref\":5.265},\"mode\":\"markers\",\"name\":\"Sodexo Justice Services\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"customdata\":[[\"HMP Maghaberry\",745,\"Department of Justice NI\"],[\"HMP Magilligan\",452,\"Department of Justice NI\"],[\"HMP Hydebank Wood\",306,\"Department of Justice NI\"],[\"Woodlands JJC\",48,\"Department of Justice NI\"]],\"hovertemplate\":\"\\u003cb\\u003e%{customdata[0]}\\u003c\\u002fb\\u003e\\u003cbr\\u003eCapacity: %{customdata[1]}\\u003cbr\\u003eOperator: %{customdata[2]}\",\"lat\":[54.5138888888889,55.175,54.5419444444444,54.64343],\"legendgroup\":\"Department of Justice NI\",\"lon\":[-6.18611111111111,-6.94805555555556,-5.92694444444445,-5.68557],\"marker\":{\"color\":\"#FFA15A\",\"size\":[745,452,306,48],\"sizemode\":\"area\",\"sizeref\":5.265},\"mode\":\"markers\",\"name\":\"Department of Justice NI\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"customdata\":[[\"Barlinnie\",1600,\"Scottish Prison Service\"],[\"Castle Huntly\",285,\"Scottish Prison Service\"],[\"Stirling\",117,\"Scottish Prison Service\"],[\"Dumfries\",200,\"Scottish Prison Service\"],[\"Edinburgh\",872,\"Scottish Prison Service\"],[\"Glenochil\",670,\"Scottish Prison Service\"],[\"Grampian\",560,\"Scottish Prison Service\"],[\"Greenock\",131,\"Scottish Prison Service\"],[\"Inverness\",110,\"Scottish Prison Service\"],[\"Low Moss\",884,\"Scottish Prison Service\"],[\"Perth\",670,\"Scottish Prison Service\"],[\"Polmont\",760,\"Scottish Prison Service\"],[\"Shotts\",553,\"Scottish Prison Service\"]],\"hovertemplate\":\"\\u003cb\\u003e%{customdata[0]}\\u003c\\u002fb\\u003e\\u003cbr\\u003eCapacity: %{customdata[1]}\\u003cbr\\u003eOperator: %{customdata[2]}\",\"lat\":[55.8694444444445,56.4488888888889,56.14218,55.0683333333333,55.9266666666667,56.1425,57.4897222222222,55.9425,57.4744444444444,55.9061111111111,56.3855555555556,55.9836111111111,55.8283333333333],\"legendgroup\":\"Scottish Prison Service\",\"lon\":[-4.18194444444444,-3.13388888888889,-3.94739,-3.62555555555556,-3.26111111111111,-3.81777777777778,-1.79111111111111,-4.78222222222222,-4.22138888888889,-4.22,-3.43,-3.73055555555556,-3.83],\"marker\":{\"color\":\"#19d3f3\",\"size\":[1600,285,117,200,872,670,560,131,110,884,670,760,553],\"sizemode\":\"area\",\"sizeref\":5.265},\"mode\":\"markers\",\"name\":\"Scottish Prison Service\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}},\"mapbox\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{\"lat\":54,\"lon\":-2.5},\"zoom\":4.6,\"style\":\"carto-positron\"},\"legend\":{\"title\":{\"text\":\"Operator\"},\"tracegroupgap\":0,\"itemsizing\":\"constant\"},\"height\":800,\"width\":800},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('161a9f4c-94bf-4945-904a-75ef1eef2d90');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n## What are you doing?\nA friend of mine wants an interactive map of prisons for a project. I like to ~~have an excuse to play with libraries I don't know yet~~ help, so I'm going to try and make one.\n\nMy friend is gathering a lot of data manually, but as a starting point, let's see what we can get from Wikipedia.\n\n## Web Scraping\nI've used Beautiful Soup to parse the html from [the Wikipedia list of prisons in the UK](https://en.wikipedia.org/wiki/List_of_prisons_in_the_United_Kingdom). To be a good neighbour, I'm not actually running the code from this each time.\n\n::: {#61cf2aad .cell execution_count=2}\n``` {.python .cell-code}\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport re\n\nurl = \"https://en.wikipedia.org/wiki/List_of_prisons_in_the_United_Kingdom\"\nresponse = requests.get(url)\nresponse.raise_for_status()\n\nsoup = BeautifulSoup(response.content, 'html.parser')\n```\n:::\n\n\nThis page has seven tables in. I've extracted each of these as a pandas DataFrame.\n\n::: {#7fa2d113 .cell execution_count=3}\n``` {.python .cell-code}\ntables = soup.find_all('table')\n\ndata_from_tables = []\n\nfor table in tables:\n    rows = table.find_all('tr')\n\n    header = rows[0]\n    row_cells = header.find_all('th')\n    row_titles = [cell.text.strip() for cell in row_cells]\n\n    table_data = dict([(title, []) for title in row_titles])\n    table_data['url'] = []\n    \n    for row in rows[1:]:\n        cells = row.find_all('td')\n\n        # Get the URL and Name field\n        name_cell = cells[0]\n        name_link = name_cell.find('a')\n\n        if name_link:\n            prison_url = name_link['href']\n        else:\n            prison_url = 'No URL'\n\n        table_data['url'].append(prison_url)\n        for i in range(0, len(row_titles)):  \n            if i > len(cells):  # If there's no matching cell in this row\n                table_data[row_titles[i]].append('')  # Append empty field\n            else:\n                table_data[row_titles[i-1]].append(cells[i-1].text.strip())\n\n    # Store the extracted data\n    try:\n        data_from_tables.append(pd.DataFrame(table_data))\n    except:\n        data_from_tables.append(table_data)\n```\n:::\n\n\n As well as taking the text from each cell, I've taken the URL for each prison's page, and used that to extract the co-ordinates for each. There's a little helper in there to parse the degrees, minutes, and seconds into numeric values.\n\n::: {#e0ed27be .cell execution_count=4}\n``` {.python .cell-code}\ndef parse_coordinates(coord_string):\n    if '.' in coord_string:\n        l_number = int(coord_string.split('°')[0])\n    else:\n        nums = re.findall(r\"\\d+\", coord_string)\n        l_number = 0\n        for i, num in enumerate(nums):\n            l_number += int(num)/60**i\n    if 'W' in coord_string or 'S' in coord_string:\n        return -l_number\n    else:\n        return l_number\n\ndef extract_coordinates(prison_url):\n    \"\"\"Extracts latitude and longitude from a prison's Wikipedia page.\"\"\"\n\n    try:\n        prison_response = requests.get(\"https://en.wikipedia.org\" + prison_url)\n        prison_response.raise_for_status()\n\n        prison_soup = BeautifulSoup(prison_response.content, 'html.parser')\n\n        latitude = prison_soup.find('span', class_ = 'latitude').get_text()\n        longitude = prison_soup.find('span', class_ = 'longitude').get_text()\n        \n        return parse_coordinates(latitude), parse_coordinates(longitude)\n\n    except Exception as e:\n        print(f\"Error getting coordinates for {prison_url}: {e}\") \n\n    return 'NaN', 'NaN'  # Return NaN if coordinates are not found\n\nfor df in data_from_tables:\n    coords_list = []\n    for url in df['url']:\n        latitude, longitude = extract_coordinates(url)\n        coords_list.append((latitude, longitude))\n\n    df['Coordinates'] = coords_list\n```\n:::\n\n\nI then named these tables as on the Wikipedia page.\n\n::: {#d4a68303 .cell execution_count=5}\n``` {.python .cell-code}\ntable_names = [\n    \"Current England and Wales Prisons\",\n    \"Former England and Wales Prisons\",\n    \"Current Northern Ireland Prisons\",\n    \"Former Northern Ireland Prisons\",\n    \"Current Scottish Prisons\",\n    \"Former Scottish Prisons\",\n    \"Future Prisons\"\n]\ntables = dict([(table_names[i], data_from_tables[i]) for i in range(7)])\n```\n:::\n\n\n## Data cleaning\n\nI then did some clean-up:\n\n1. Prisons run by HMP are blank rows in the table of current prisons in England and Wales, so I filled that\n2. I had to rename the prisons in Northern Ireland. I didn't bother doing it programmatically because there are only four\n3. Northern Ireland prisons are run by the Department of Justice NI, which I filled into\n4. I had to manually find the capacities of the Scottish prisons, and use the information in the notes to fill in the operator\n\n::: {#43641cf5 .cell execution_count=6}\n``` {.python .cell-code}\ntables['Current England and Wales Prisons']['Operator'].fillna('HMP', inplace = True)\ntables['Current Northern Ireland Prisons'].index = ['HMP Maghaberry', 'HMP Magilligan', 'HMP Hydebank Wood', 'Woodlands JJC']\ntables['Current Northern Ireland Prisons']['Operator'] = [*['Department of Justice NI']*3 , 'Unknown']\nscottish_capacities = [700, 1600, 285, 117, 200, 872, 670, 560, 131, 110, 692, 884, 670, 760, 553]\ntables['Current Scottish Prisons']['Operator'] = 'Scottish Prison Service'\ntables['Current Scottish Prisons']['Operator'].loc['Addiewell'] = 'Sodexo Justice Services'\ntables['Current Scottish Prisons']['Operator'].loc['Kilmarnock'] = 'Serco'\ntables['Current Scottish Prisons']['Capacity'] = scottish_capacities\n```\n:::\n\n\nThen I concatenated the tables of current prisons\n\n::: {#fe6cae29 .cell execution_count=7}\n``` {.python .cell-code}\ncombo = pd.concat([\n    tables['Current England and Wales Prisons'][['Capacity', 'Operator', 'Coordinates']],\n    tables['Current Northern Ireland Prisons'][['Capacity', 'Operator', 'Coordinates']],\n    tables['Current Scottish Prisons'][['Capacity', 'Operator', 'Coordinates']]\n])\n```\n:::\n\n\nThe last things to do are to\n1. Remove the citations from the `Capacity` and `Operator` columns. This turns them from e.g. `563[17]` to `563`, which lets them be parsed as numbers.\n2. Convert the coordinates from one column of both to two columns: latitude and longitude\n\n::: {#6cc9f647 .cell execution_count=8}\n``` {.python .cell-code}\ncombo['Capacity'] = combo['Capacity'].apply(lambda x: x if type(x) == int else int(x.split(\"[\")[0]))\ncombo['Operator'] = combo['Operator'].apply(lambda x: x.split('[')[0] if '[' in x else x)\ncombo['latitude'] = combo['Coordinates'].apply(lambda x: x.split(',')[0][1:])\ncombo['longitude'] = combo['Coordinates'].apply(lambda x: x.split(',')[1][:-1])\n```\n:::\n\n\nThere was a bit more manual entry I had to do just to correct some of the co-ordinates that weren't picked up by the script correctly.\n\n## Plotting\nI then used plotly's scatter_mapbox to load a map from mapbox and plot the prison locations, sized by capacity and coloured by operator. Pretty neat, huh?\n\n",
    "supporting": [
      "prison_map_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.27.0.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}