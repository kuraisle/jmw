{"title":"Predicting drug resistance from gene expression","markdown":{"yaml":{"title":"Predicting drug resistance from gene expression","format":{"html":{"code-fold":true,"code-summary":"Show the code"}},"description":"As practice for using gradient boosted trees, I used an open dataset to use gene expression in tumours to predict resistance to chemotherapy drugs","date-format":"iso","date":"today","categories":["data analysis"],"draft":true,"execute":{"freeze":true}},"headingText":"It seems that previous releases get moved, so I'm just downloading it locally instead of getting it via ftp","containsRefs":false,"markdown":"\n\n```{python}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport lightgbm\nimport shap\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nfrom re import sub\n```\nThe [Genomics of Drug Sensitivity in Cancer](https://www.cancerrxgene.org/) dataset is a massive project testing the sensitivity of tumour cell lines to different drugs.\n\n- Expression to IC50\n- Expression IC50 adding weights\n- Expression IC50 transporters\n- Expression IC50 transporters optuna params\n- Filter IC50 by count\n- Explore GDSC1\n- Cluster gene density\n- Expression IC50 unclustered\n\n```{python}\n#ic50_data = pd.read_excel(\"ftp://ftp.sanger.ac.uk/pub/project/cancerrxgene/releases/current_release/GDSC1_fitted_dose_response_25Feb20.xlsx\")\nic50_data = pd.read_excel(\"data/GDSC1_fitted_dose_response_27Oct23.xlsx\")\nic50_data.drop(columns = ['NLME_RESULT_ID', 'NLME_CURVE_ID', 'SANGER_MODEL_ID', 'TCGA_DESC', 'DRUG_ID', 'PUTATIVE_TARGET', 'PATHWAY_NAME', 'COMPANY_ID', 'WEBRELEASE', 'MIN_CONC', 'MAX_CONC', 'AUC', 'RMSE'], inplace=True)\nic50_data.head()\n```\n\n```{python}\n# I did have it downloading directly from the source, but I've had failures retrieving it and the IC50 data, so I'm loading it locally instead\n#rma_expr = pd.read_csv(\"https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip\", sep = \"\\t\")\nrma_expr = pd.read_csv(\"data/Cell_line_RMA_proc_basalExp.txt\", sep = \"\\t\")\nrma_expr = rma_expr.drop('GENE_title', axis = 1)\nrma_expr= rma_expr.set_index('GENE_SYMBOLS')\nrma_expr.head()\n```\n\n```{python}\nrma_cells = [int(x.split('.')[1]) for x in rma_expr.columns]\ncell_id_matches = []\n\nfor cell_id in rma_cells:\n    if cell_id in ic50_data['COSMIC_ID'].values:\n        cell_id_matches.append(cell_id)\n        \nprint(f'Number of matches: {len(cell_id_matches)} of {len(rma_cells)}')\n```\n\n```{python}\nrma_matches = np.isin(np.array(rma_cells), np.array(cell_id_matches))\n\nrma_expr_matched = rma_expr.iloc[:,rma_matches]\nrma_expr_matched.shape\n```\n\n```{python}\nic50_matched = ic50_data.loc[ic50_data['COSMIC_ID'].isin(cell_id_matches)]\nic50_matched\n```\n\n```{python}\nlen(ic50_matched['DRUG_NAME'].unique())\n```\n\n```{python}\nrma_expr_matched = rma_expr_matched.T\nrma_expr_matched['COSMIC_ID'] = [int(x.split('.')[1]) for x in rma_expr_matched.index]\nrma_expr_matched = rma_expr_matched.loc[:, rma_expr_matched.columns.notna()]\nrma_expr_matched.head()\n```\n\n```{python}\ndef model_drug(drug, verbose = False, figure = False):\n    ic50_sub = ic50_matched.loc[ic50_matched['DRUG_NAME'] == drug][['COSMIC_ID',\n                                                                    'LN_IC50',\n                                                                    'Z_SCORE']]\n    df = pd.merge(ic50_sub, rma_expr_matched).set_index('COSMIC_ID')\n    \n    X = df.drop(['LN_IC50', 'Z_SCORE'], axis = 1)\n    y = df['LN_IC50']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n    \n    train_data = lightgbm.Dataset(X_train, label = y_train)\n    test_data = lightgbm.Dataset(X_test, label = y_test, reference = train_data)\n    \n    param = {'boosting_type': 'goss',\n             'n_estimators': 500,\n             'num_iterations': 500,\n             'learning_rate': 0.05,\n             'max_bin': 1024,\n             'metric': 'l2',\n             'objective': 'regression',\n             'num_leaves': 50,\n             'verbose': -1}\n    \n    bst = lightgbm.train(param,\n                         train_data,\n                         callbacks=[lightgbm.early_stopping(stopping_rounds=30, verbose = False)],\n                         valid_sets = test_data)\n    \n    fit_predict = bst.predict(X_test)\n    if verbose:\n        mae = mean_absolute_error(fit_predict, y_test)\n        test_range = max(y_test)-min(y_test)\n        print(f'{drug}:\\nMAE = {mae:.3} (range {test_range:.3})')\n    if figure:\n        fig, ax = plt.subplots(figsize = (16,8), ncols = 2)\n        ax[0].scatter(y_test, fit_predict, color = 'black', alpha = 0.5)\n        ax[0].ylabel = 'Predicted ln(IC50)'\n        ax[0].xlabel = 'True ln(IC50)'\n        ax[0].set_title(drug)\n        lightgbm.plot_importance(bst, max_num_features=20, ax = ax[1])\n        if figure == 'save':\n            filename = sub('[^A-Za-z0-9-]+', '', drug)\n            plt.savefig(f'{filename}.png')\n    return bst, fit_predict, y_test\n\n\n#all_models = dict()\n\n#for drug in ic50_matched['DRUG_NAME'].unique():\n#    all_models[drug] = model_drug(drug)\n\nexample_drugs = ['AZ628', 'WZ3105', 'NPK76-II-72-1', 'Tubastatin A', 'PIK-93', 'Venotoclax', 'Methotrexate', 'Refametinib', 'AZD7762', 'Tanespimycin', 'Nutlin-3a (-)', 'Trametinib', 'Dabrafenib','SN-38', 'Erlotinib']\n\nexample_models = dict()\n\nfor drug in example_drugs:\n  example_models[drug] = model_drug(drug)\n```\n\n```{python}\ndef r_squared(predicted, true):\n    mean = np.mean(true)\n    true_diff_sq = np.square(true - mean)\n    pred_diff_sq = np.square(true - predicted)\n    return 1-(np.sum(pred_diff_sq)/np.sum(true_diff_sq))\n\nmodels_r_sq = dict([(x, r_squared(y[1], y[2])) for x, y in example_models.items()])\n\n[(x,y) for x,y in models_r_sq.items() if y > 0.4]\n```\n\n```{python}\ndef plot_test(drug):\n    bst, fit_predict, y_test = example_models[drug]\n    fig, ax = plt.subplots(figsize = (16,8), ncols = 2)\n    ax[0].scatter(y_test, fit_predict, color = 'black', alpha = 0.5)\n    ax[0].ylabel = 'Predicted ln(IC50)'\n    ax[0].xlabel = 'True ln(IC50)'\n    ax[0].set_title(drug)\n    lightgbm.plot_importance(bst, max_num_features=20, ax = ax[1])\n```\n\n```{python}\nplot_test('AZ628')\n```\n\n```{python}\nplot_test('Erlotinib')\n```\n\n```{python}\nshap.initjs()\n```\n\n```{python}\ndef prep_data(drug):\n    ic50_sub = ic50_matched.loc[ic50_matched['DRUG_NAME'] == drug][['COSMIC_ID',\n                                                                    'LN_IC50',\n                                                                    'Z_SCORE']]\n    df = pd.merge(ic50_sub, rma_expr_matched).set_index('COSMIC_ID')\n    \n    return df.drop(['LN_IC50', 'Z_SCORE'], axis = 1)\n\ndef plot_shap(drug):\n    model = all_models[drug][0]\n    X = prep_data(drug)\n    explainer = shap.TreeExplainer(model)\n    shap_values = explainer.shap_values(X)\n    shap.summary_plot(shap_values, X, title = drug)\n\nplot_shap('AZ628')\n```\n","srcMarkdownNoYaml":"\n\n```{python}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport lightgbm\nimport shap\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nfrom re import sub\n```\nThe [Genomics of Drug Sensitivity in Cancer](https://www.cancerrxgene.org/) dataset is a massive project testing the sensitivity of tumour cell lines to different drugs.\n\n- Expression to IC50\n- Expression IC50 adding weights\n- Expression IC50 transporters\n- Expression IC50 transporters optuna params\n- Filter IC50 by count\n- Explore GDSC1\n- Cluster gene density\n- Expression IC50 unclustered\n\n```{python}\n# It seems that previous releases get moved, so I'm just downloading it locally instead of getting it via ftp\n#ic50_data = pd.read_excel(\"ftp://ftp.sanger.ac.uk/pub/project/cancerrxgene/releases/current_release/GDSC1_fitted_dose_response_25Feb20.xlsx\")\nic50_data = pd.read_excel(\"data/GDSC1_fitted_dose_response_27Oct23.xlsx\")\nic50_data.drop(columns = ['NLME_RESULT_ID', 'NLME_CURVE_ID', 'SANGER_MODEL_ID', 'TCGA_DESC', 'DRUG_ID', 'PUTATIVE_TARGET', 'PATHWAY_NAME', 'COMPANY_ID', 'WEBRELEASE', 'MIN_CONC', 'MAX_CONC', 'AUC', 'RMSE'], inplace=True)\nic50_data.head()\n```\n\n```{python}\n# I did have it downloading directly from the source, but I've had failures retrieving it and the IC50 data, so I'm loading it locally instead\n#rma_expr = pd.read_csv(\"https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip\", sep = \"\\t\")\nrma_expr = pd.read_csv(\"data/Cell_line_RMA_proc_basalExp.txt\", sep = \"\\t\")\nrma_expr = rma_expr.drop('GENE_title', axis = 1)\nrma_expr= rma_expr.set_index('GENE_SYMBOLS')\nrma_expr.head()\n```\n\n```{python}\nrma_cells = [int(x.split('.')[1]) for x in rma_expr.columns]\ncell_id_matches = []\n\nfor cell_id in rma_cells:\n    if cell_id in ic50_data['COSMIC_ID'].values:\n        cell_id_matches.append(cell_id)\n        \nprint(f'Number of matches: {len(cell_id_matches)} of {len(rma_cells)}')\n```\n\n```{python}\nrma_matches = np.isin(np.array(rma_cells), np.array(cell_id_matches))\n\nrma_expr_matched = rma_expr.iloc[:,rma_matches]\nrma_expr_matched.shape\n```\n\n```{python}\nic50_matched = ic50_data.loc[ic50_data['COSMIC_ID'].isin(cell_id_matches)]\nic50_matched\n```\n\n```{python}\nlen(ic50_matched['DRUG_NAME'].unique())\n```\n\n```{python}\nrma_expr_matched = rma_expr_matched.T\nrma_expr_matched['COSMIC_ID'] = [int(x.split('.')[1]) for x in rma_expr_matched.index]\nrma_expr_matched = rma_expr_matched.loc[:, rma_expr_matched.columns.notna()]\nrma_expr_matched.head()\n```\n\n```{python}\ndef model_drug(drug, verbose = False, figure = False):\n    ic50_sub = ic50_matched.loc[ic50_matched['DRUG_NAME'] == drug][['COSMIC_ID',\n                                                                    'LN_IC50',\n                                                                    'Z_SCORE']]\n    df = pd.merge(ic50_sub, rma_expr_matched).set_index('COSMIC_ID')\n    \n    X = df.drop(['LN_IC50', 'Z_SCORE'], axis = 1)\n    y = df['LN_IC50']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n    \n    train_data = lightgbm.Dataset(X_train, label = y_train)\n    test_data = lightgbm.Dataset(X_test, label = y_test, reference = train_data)\n    \n    param = {'boosting_type': 'goss',\n             'n_estimators': 500,\n             'num_iterations': 500,\n             'learning_rate': 0.05,\n             'max_bin': 1024,\n             'metric': 'l2',\n             'objective': 'regression',\n             'num_leaves': 50,\n             'verbose': -1}\n    \n    bst = lightgbm.train(param,\n                         train_data,\n                         callbacks=[lightgbm.early_stopping(stopping_rounds=30, verbose = False)],\n                         valid_sets = test_data)\n    \n    fit_predict = bst.predict(X_test)\n    if verbose:\n        mae = mean_absolute_error(fit_predict, y_test)\n        test_range = max(y_test)-min(y_test)\n        print(f'{drug}:\\nMAE = {mae:.3} (range {test_range:.3})')\n    if figure:\n        fig, ax = plt.subplots(figsize = (16,8), ncols = 2)\n        ax[0].scatter(y_test, fit_predict, color = 'black', alpha = 0.5)\n        ax[0].ylabel = 'Predicted ln(IC50)'\n        ax[0].xlabel = 'True ln(IC50)'\n        ax[0].set_title(drug)\n        lightgbm.plot_importance(bst, max_num_features=20, ax = ax[1])\n        if figure == 'save':\n            filename = sub('[^A-Za-z0-9-]+', '', drug)\n            plt.savefig(f'{filename}.png')\n    return bst, fit_predict, y_test\n\n\n#all_models = dict()\n\n#for drug in ic50_matched['DRUG_NAME'].unique():\n#    all_models[drug] = model_drug(drug)\n\nexample_drugs = ['AZ628', 'WZ3105', 'NPK76-II-72-1', 'Tubastatin A', 'PIK-93', 'Venotoclax', 'Methotrexate', 'Refametinib', 'AZD7762', 'Tanespimycin', 'Nutlin-3a (-)', 'Trametinib', 'Dabrafenib','SN-38', 'Erlotinib']\n\nexample_models = dict()\n\nfor drug in example_drugs:\n  example_models[drug] = model_drug(drug)\n```\n\n```{python}\ndef r_squared(predicted, true):\n    mean = np.mean(true)\n    true_diff_sq = np.square(true - mean)\n    pred_diff_sq = np.square(true - predicted)\n    return 1-(np.sum(pred_diff_sq)/np.sum(true_diff_sq))\n\nmodels_r_sq = dict([(x, r_squared(y[1], y[2])) for x, y in example_models.items()])\n\n[(x,y) for x,y in models_r_sq.items() if y > 0.4]\n```\n\n```{python}\ndef plot_test(drug):\n    bst, fit_predict, y_test = example_models[drug]\n    fig, ax = plt.subplots(figsize = (16,8), ncols = 2)\n    ax[0].scatter(y_test, fit_predict, color = 'black', alpha = 0.5)\n    ax[0].ylabel = 'Predicted ln(IC50)'\n    ax[0].xlabel = 'True ln(IC50)'\n    ax[0].set_title(drug)\n    lightgbm.plot_importance(bst, max_num_features=20, ax = ax[1])\n```\n\n```{python}\nplot_test('AZ628')\n```\n\n```{python}\nplot_test('Erlotinib')\n```\n\n```{python}\nshap.initjs()\n```\n\n```{python}\ndef prep_data(drug):\n    ic50_sub = ic50_matched.loc[ic50_matched['DRUG_NAME'] == drug][['COSMIC_ID',\n                                                                    'LN_IC50',\n                                                                    'Z_SCORE']]\n    df = pd.merge(ic50_sub, rma_expr_matched).set_index('COSMIC_ID')\n    \n    return df.drop(['LN_IC50', 'Z_SCORE'], axis = 1)\n\ndef plot_shap(drug):\n    model = all_models[drug][0]\n    X = prep_data(drug)\n    explainer = shap.TreeExplainer(model)\n    shap_values = explainer.shap_values(X)\n    shap.summary_plot(shap_values, X, title = drug)\n\nplot_shap('AZ628')\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"gdsc_drug_models.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","theme":"flatly","title":"Predicting drug resistance from gene expression","description":"As practice for using gradient boosted trees, I used an open dataset to use gene expression in tumours to predict resistance to chemotherapy drugs","date-format":"iso","date":"today","categories":["data analysis"],"draft":true,"code-summary":"Show the code"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}